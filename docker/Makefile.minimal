# Formation Platform Minimal Dockerfile
# Makefile for building Docker images for minimal deployment

# --- Variables ---
# VERSION: Sets the version for image tags. 
#          Defaults to git describe, or 'dev' if not in a git repo.
#          Used to derive TAG, MAJOR_VERSION, MINOR_VERSION.
# Example: make all VERSION=1.2.3
VERSION ?= $(shell git describe --tags --always --dirty || echo "dev")
MAJOR_VERSION ?= $(shell echo $(VERSION) | cut -d. -f1)
MINOR_VERSION ?= $(shell echo $(VERSION) | cut -d. -f2 || echo "0")

# REGISTRY: Docker registry/organization prefix for image tags.
# Example: make all REGISTRY=formationai
REGISTRY ?= formationai

# TAG: Specific tag used, derived from VERSION.
TAG ?= $(VERSION)

# FEATURES: Rust features to include when building binaries
FEATURES ?= 

# CACHE_BUST: Used to invalidate Docker cache when needed
CACHE_BUST ?= $(shell date +%s)

# --- Config ---
# List of minimal services
SERVICES = form-dns form-state vmm-service form-pack-manager formnet

.PHONY: all $(SERVICES) clean push help build-form-state

# --- Targets ---
# Build all images
all: $(SERVICES)

# Build form-state binary with specified features
build-form-state:
	@echo "Building form-state binary with features: $(FEATURES)"
	@cd .. && cargo build --release $(if $(FEATURES),--features "$(FEATURES)",)
	@echo "✅ form-state binary built successfully"

# Build individual service images
form-dns:
	@echo "Building form-dns image"
	@docker build \
		-t $(REGISTRY)/form-dns:latest \
		-t $(REGISTRY)/form-dns:$(TAG) \
		-t $(REGISTRY)/form-dns:$(MAJOR_VERSION).$(MINOR_VERSION) \
		-f ../form-dns/Dockerfile \
		..
	@echo "✅ form-dns image built successfully"

form-state: build-form-state
	@echo "Building form-state image"
	@docker build \
		--build-arg CACHE_BUST=$(CACHE_BUST) \
		-t $(REGISTRY)/form-state:latest \
		-t $(REGISTRY)/form-state:$(TAG) \
		-t $(REGISTRY)/form-state:$(MAJOR_VERSION).$(MINOR_VERSION) \
		-f ../form-state/Dockerfile \
		..
	@echo "✅ form-state image built successfully"

vmm-service:
	@echo "Building vmm-service image"
	@docker build \
		-t $(REGISTRY)/vmm-service:latest \
		-t $(REGISTRY)/vmm-service:$(TAG) \
		-t $(REGISTRY)/vmm-service:$(MAJOR_VERSION).$(MINOR_VERSION) \
		-f ../form-vmm/vmm-service/Dockerfile \
		..
	@echo "✅ vmm-service image built successfully"

form-pack-manager:
	@echo "Building form-pack-manager image"
	@docker build \
		-t $(REGISTRY)/form-pack-manager:latest \
		-t $(REGISTRY)/form-pack-manager:$(TAG) \
		-t $(REGISTRY)/form-pack-manager:$(MAJOR_VERSION).$(MINOR_VERSION) \
		-f ../form-pack/Dockerfile \
		..
	@echo "✅ form-pack-manager image built successfully"

formnet:
	@echo "Building formnet image"
	@docker build \
		-t $(REGISTRY)/formnet:latest \
		-t $(REGISTRY)/formnet:$(TAG) \
		-t $(REGISTRY)/formnet:$(MAJOR_VERSION).$(MINOR_VERSION) \
		-f ../form-net/Dockerfile \
		..
	@echo "✅ formnet image built successfully"

# Clean up all images
clean:
	@echo "Removing all Formation Docker images"
	@for service in $(SERVICES); do \
		docker images | grep $(REGISTRY)/$$service | awk '{print $$1":"$$2}' | xargs -r docker rmi || true; \
	done
	@echo "✅ Images removed successfully"

# Push all images to registry
push: all
	@echo "Pushing all images to registry"
	@for service in $(SERVICES); do \
		docker push $(REGISTRY)/$$service:latest; \
		docker push $(REGISTRY)/$$service:$(TAG); \
		docker push $(REGISTRY)/$$service:$(MAJOR_VERSION).$(MINOR_VERSION); \
	done
	@echo "✅ All images pushed successfully"

# Display help
help:
	@echo "Formation Docker Minimal Build System"
	@echo "=================================="
	@echo ""
	@echo "Usage: make -f Makefile.minimal [TARGET] [VARIABLE=value]"
	@echo ""
	@echo "Available targets:"
	@echo "  all                Build images for minimal services: $(SERVICES)"
	@echo "  <service_name>     Build image for a specific service (e.g., make form-dns)"
	@echo "  build-form-state   Build the form-state binary with specified features"
	@echo "  clean              Remove all locally built Formation images tagged with registry '$(REGISTRY)'"
	@echo "  push               Build and push all images to registry '$(REGISTRY)'"
	@echo "  help               Show this help message"
	@echo ""
	@echo "Available variables:"
	@echo "  VERSION=x.y.z      Set specific version tag (default: $(VERSION))"
	@echo "  REGISTRY=name      Set registry/organization prefix (default: $(REGISTRY))"
	@echo "  FEATURES=feature1,feature2   Set Rust features for binary builds (default: none)"
	@echo "  CACHE_BUST=value   Set a value to invalidate Docker cache (default: current timestamp)"
	@echo "" 